#define INTERVAL rand() % 26
#define MS_PER_SECOND 1000
#define SLEEPTIME INTERVAL * MS_PER_SECOND

constexpr int RandomSeed(void) {

	return '0' * -40271 + // offset accounting for digits' ANSI offsets
		__TIME__[7] * 1 +
		__TIME__[6] * 10 +
		__TIME__[4] * 60 +
		__TIME__[3] * 600 +
		__TIME__[1] * 3600 +
		__TIME__[0] * 36000;
};

unsigned long long __get_timestamp() {

	const size_t UNIX_TIME_START = 0x019DB1DED53E8000;
	const size_t TICKS_PER_MILLISECOND = 1000;

	LARGE_INTEGER time;
	time.LowPart = *((DWORD*)(0x7FFE0000 + 0x14));
	time.HighPart = *((long*)(0x7FFE0000 + 0x1c));

	return (unsigned long long)((time.QuadPart - UNIX_TIME_START) / TICKS_PER_MILLISECOND);
}

void __alt_sleepms(size_t ms) {

	volatile size_t x = rand();
	const unsigned long long end = __get_timestamp() + ms;

	while (__get_timestamp() < end) { x += 1; }
	if (__get_timestamp() - end > 2000) return;
}

void XorCipher(u_char data[], u_int datalen, u_char key[], u_int keylen) {

	for (int i = 0; i < datalen; i++) {
		data[i] = data[i] ^ key[i % keylen];
	}
}