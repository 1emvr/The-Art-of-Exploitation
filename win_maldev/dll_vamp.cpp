/*
	Author:		lemur
	GitHub:		https://github.com/1emvr
	Email:		1emvr@protonmail.com
	Date:		01/06/2023	13:39 PM

	Remote Process Injection Proof of Concept

*/

#include <stdio.h>
#include <Windows.h>

int main() {

	char shellcode[] = {};

	HANDLE process_handle = OpenProcess(PROCESS_ALL_ACCESS, true, );
	void* exec_memory = VirtualAllocEx(process_handle, NULL, , MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	
	HANDLE thread_handle = CreateRemoteThread(process_handle, NULL, 0, (LPTHREAD_START_ROUTINE)exec_memory, NULL, 0, 0);
	WriteProcessMemory(process_handle, exec_memory, shellcode, sizeof(shellcode), NULL);
	CloseHandle(process_handle);
	
	return 0;
	/*
		Arguments for OpenProcess() function:

			This uses the handle to store the variable retrieved from the target process:

				- DWORD dwDesiredAccess:		This access right is checked against the security descriptor for the process.
				- BOOL bInheritHandle:			Boolean, if true then processes created by this particular process will inherit the handle.
				- DWORD dwProcessId:			The identifier of the local process to be opened. This can fail if we're calling a system process or CSRSS process.

		Arguments for VirtualAllocEx() function:

			Reserves, commits or changes the state of a region of memory within the virtual address space of a specified process:

				- HANDLE hProcess:				The handle to a process. This sets the value of memory address space to allocate. The handle must have PROCESS_VM_OPERATION access rights.
				- LPVOID lpAddress:				The pointer that specifies a desired starting address for the region of pages that we want to allocate. If NULL, the functions determins where to allocate.
				- SIZE_T dwSize:				The sizeof region to allocate. If NULL, the function rounds up to the next page boundary.
				- DWORD flAllocationType:		The type of memory allocation.
				- DWORD flProtect:				The memory protection for the region of pages. If pages are being committed, you can specify one of the memory protection constants.

		Arguments for CreateRemoteThread() function:

			Creates a thread that runs in the virtual address space of another process.

				- HANDLE hProcess:								A handle to the process which the thread is to be created.
				- LP_SECURITY_ATTRIBUTES lpThreadAttributes:	A pointer to a SECURITY_ATTRIBUTES struct that specifies a security descriptor for the new thread/ whether child processes can inherit return.
				- SIZE_T dwStackSize:							The initial size of the stack, in bytes. If zero, the new thread uses the default size for the executable.
				- LPTHREAD_START_ROUTINE lpStartAddress:		A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and starting address in remote process.
				- LPVOID lpParameter:							A pointer to a variable to be passed to the thread function.
				- DWORD dwCreationFlags:						The flags that control the creation of the thread.
				- LPWORD lpThreadId:							A pointer to a variable that receives the thread identifier.

		Arguments for WriteProcessMemory() function:

			Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails:

				HANDLE hProccess:					A handle to the proccess memory to be modified. Handle must have PROCESS_VM_WRITE and PROCCESS_VM_OPERATION access to the proccess.
				LPVOID lpBaseAddress:				A pointer to the base address in the specified process to which data is written
				LPCVOID lpBuffer:					A pointer to the buffer that contains data to be written in the address space.
				SIZE_T nSize:						The number of bytes to be written to the specified proccess.
				SIZE_T *lpNumberOfBytesWritten:		A pointer to a variable that reveives the number of bytes transferred into the specified proccess.
	*/
}